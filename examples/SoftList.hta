 <HTML>
<HEAD>
<TITLE>Software Lister</TITLE>
<STYLE>
BODY {font-family: verdana; font-size: 13px; line-height: 1.4;}
#TABLE1 {width: 700px; background-color: #FFFFFF; color: #000040; font-family: verdana; font-size: 13px; line-height: 1.4; border-style: inset; border-width: 2px;}
#But1 {background-color: #0033CC; color: #FFFFFF; font-family: verdana; font-size: 13px; }
TD.TDList {padding: 10px; background-color: #FFFFFF; color: #000040; font-family: verdana; font-size: 13px; line-height: 1.4; border-style: solid; border-width: 1px; border-color: #EEEEEE;}
.TRed {font-family: verdana; font-size: 13px; line-height: 1.4; color: #CC0066;}
</STYLE>

<SCRIPT LANGUAGE="VBScript" SRC="..\RegClass.vbs"></SCRIPT>

<SCRIPT LANGUAGE="VBScript">
  Dim RC, sT1, sT2, Q2
Sub But1_onclick()
  Dim s1, iRet0, s4, iRet, iRet2, AKeys, AVals, ATypes, i2, s2, LSiz, AList(), s3, iCnt, sList
  Dim Processor : Processor = GetObject("winmgmts:root\cimv2:Win32_Processor='cpu0'").AddressWidth
  Set RC = New CWMIReg
  sT1 = "<SPAN CLASS=" & Q2 & "TRed" & Q2 & ">"
  sT2 = "</SPAN>"
  Q2 = Chr(34)

  ReDim aEnumSoft(0) 
  aEnumSoft(0) = "HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall"
  If Processor = 64 Then
  	ReDim Preserve aEnumSoft(1)
  	aEnumSoft(1) = "HKLM64\Software\Microsoft\Windows\CurrentVersion\Uninstall"
  End If
  
  ReDim AList(0)
  iCnt = 0
  For Each s1 In aEnumSoft	 	
    On Error Resume Next
	's1 = "HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall"
	iRet0 = RC.EnumKeys(s1, AKeys)
	   If iRet0 < 1 Then
	      MsgBox "EnumKeys(" & s1 & ") returned error code " & iRet0
	      Set RC = Nothing
	      Exit Sub
	   End If  
	      
	'-- loop through array of Uninstall subkey names to retrieve values in each key.
	
	ReDim Preserve AList(UBound(AList) + iRet0)
	
	     For i2 = 0 to iRet0 - 1
	       sList = ""
	          '-- get name that shows in Add/Remove. If not present then skip the rest and go to next item.
	         s2 = s1 & "\" & AKeys(i2) & "\DisplayName"
	         iRet = RC.GetValue(s2)
	          If Len(iRet) > 0 Then
	             s3 = sT1 & "Program Name: " & sT2 & iRet & "<BR>"
	             
	                  '-- get size of install. (may not always be accurate.)
	               s2 = s1 & "\" & AKeys(i2) & "\EstimatedSize"
	               LSiz = RC.GetValue(s2)
	               If (Len(LSiz) > 0) And isnumeric(LSiz) Then
	                  If LSiz > 1024 Then 
	                     LSiz = LSiz \ 1024
	                     s3 = s3 & sT1 & "Estimated Size: " & sT2 & LSiz & " MB<BR>"
	                  Else
	                     s3 = s3 & sT1 & "Estimated Size: " & sT2 & LSiz & " KB<BR>"
	                  End If
	               End If  
	                 '-- get version number with msi installs.
	               s2 = s1 & "\" & AKeys(i2) & "\DisplayVersion"
	                iRet = RC.GetValue(s2)
	                If Len(iRet) > 0 Then
	                  s3 = s3 & sT1 & "Version: " & sT2 & iRet & "<BR>"
	                End If 
	                 sList = "<TR><TD Class=" & Q2 & "TDList" & Q2 & ">" & s3 & "</TD></TR>"  
	
	               AList(iCnt) = sList
	              iCnt = iCnt + 1
	          End If
	       Next        
  Next
  Set RC = Nothing
  Set IC = Nothing
  
  If iCnt > 0 Then
    ReDim Preserve AList(iCnt - 1)
    s2 = Join(AList, vbCrLf)
    s2 = "<TABLE ID=" & Q2 & "TABLE1" & Q2 & ">" & s2 & "</TABLE>"
    DList.innerHTML = s2
    
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.CreateTextFile(CreateObject("WScript.Shell").SpecialFolders("Desktop") & "\blah.txt", True)
      ts.write s2
      ts.Close
      Set ts = Nothing
     Set fso = Nothing
  End If  
End Sub  
  
</SCRIPT>

</HEAD>
<BODY BGCOLOR="#77A4FF" TEXT="#FFFFFF">
<DIV align="left">
<H2> Software Lister Utility</H2>
&#160;&#160; This utility uses a WMI Registry VBScript class to retrieve a list of software
installed. The list represents those programs that are visible in the 
<I>Add/Remove Software</I> window. As can be seen from the code in this HTA, the WMI
Registry class makes general Registry access fairly simple and concise.<BR><BR>


&#160;&#160; This utility also uses an icon extractor VBS class to retrieve the
displayed icon for any program that has one. The icon display is not foolproof. It assumes
that the relevant icon is the first one in the file that contains it. Assuming that, it then 
attempts to extract the best quality icon of no larger than 32x32. The logic behind that method
is rather involved: The icon extractor script can extract any icon from a PE file, but such
icons are often compound. So while the program icon might be listed as the 3rd icon in the file,
the first and second may be both compound icons (16x16, 32x32, 48x48, etc.), with the result that the
3rd icon may actually be, say, the 13th through 18th icons actually embedded in the file. Since the first icon is most
often the program icon, this script settles for extracting that.<BR>
&#160;&#160; Ironically, while Firefox has no trouble displaying .ico files, despite .ico
being a Windows-only format, Internet Explorer may have trouble. IE5 does not display any
program icons. IE6 seems to have trouble with 24-bit-color icons. It displays them but only
in a corrupted fashion.
<BR><BR>
&#160;&#160; The software list includes icon, program name, estimated size, and version -
to the extent that information is available. Note that <I>estimated size</I> is not
always accurate. When program installers support that value it should be the total size of all installed
files. But that doesn't seem to always hold true. For example, in tests OpenOffice 2.4 showed
an estimated size of 721 MB, but the installation was actually 175 MB. The number 721 may have
been an error in the O.O. installer, or the installer may have only been capable of providing
the total size of an O.O. when all possible components are installed.

<BR><BR>
<DIV ALIGN="center">
<INPUT TYPE="button" ID="But1" VALUE=" Get List "></INPUT>
</DIV>
<BR><BR>
<DIV ID="DList">
</DIV>

</DIV>
</BODY></HTML>